#!/bin/bash

set -euo pipefail

toolsdir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
projectdir=$(realpath "$toolsdir/..") # Resolve docker "unable to prepare context: unable to evaluate symlinks in Dockerfile path"
projectgithub="https://github.com/exchangeunion/xud-docker"
imagesdir="$projectdir/images"
supportsdir="$projectdir/supports"
labelprefix="com.exchangeunion.image"
tagprefix="exchangeunion"
push=false
images=(bitcoind litecoind lnd lnd-simnet parity raiden raiden-simnet ltcd-simnet xud xud-simnet)

cd $projectdir
branch=`git rev-parse --abbrev-ref HEAD`
created=`date -u +"%Y-%m-%dT%H:%M:%SZ"` # 2019-07-24T20:59:00Z
revision=`git rev-parse HEAD`

is_git_dirty() {
  ! git diff --quiet
}

if is_git_dirty; then
    revision="$revision-dirty"
fi

cd $imagesdir

getversion() {
    cat versions | grep "$1" | cut -d'=' -f 2
}

build_xud_simnet() {
    pushd $supportsdir > /dev/null
    docker build . -t xud-simnet
    popd > /dev/null
}

build() {
    labels=(
        "$labelprefix.branch=$branch"
        "$labelprefix.created=$created"
        "$labelprefix.revision=$revision"
    )
    if [[ ! $revision =~ ^.*-dirty$ ]]; then
        labels+=(
            "$labelprefix.source=$projectgithub/blob/$revision/images/$1/Dockerfile"
        )
    fi
    if [[ $1 =~ ^.*-simnet$ ]]; then
        tag="$tagprefix/$1"
        opts=""
        build_xud_simnet
    else
        version=`getversion $1`
        tag="$tagprefix/$1:$version"
        opts="--build-arg version=$version"
    fi
    docker build -t $tag $1 \
        $opts \
        `for i in ${labels[@]}; do echo "--label $i"; done`
}

push() {
    if [[ $1 =~ ^.*-simnet$ ]]; then
        tag="$tagprefix/$1"
    else
        version=`getversion $1`
        tag="$tagprefix/$1:$version"
    fi
    imgbranch=`docker image inspect -f "{{index .Config.Labels \"$labelprefix.branch\"}}" $tag`
    if [[ $imgbranch != 'master' ]]; then
        echo "The image $tag is not built from master"
        exit 1
    fi
    echo docker push $tag
}

print_usage() {
    echo "Usage: $0 [<image>] [<version>]"
    exit 0
}

while getopts ph opt; do
    case $opt in
        p) 
            push=true
            ;;
        h) 
            print_usage
            ;;
    esac
done
shift $((OPTIND -1))

if [[ $branch != "master" && $push == 'true' ]]; then
    echo "Push image from other branch (not master) is prohibited"
    exit 1
fi

contains_element () {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

if [[ $# -gt 0 ]]; then
    if contains_element "$1" "${images[@]}"; then
        if [[ $push == true ]]; then
            push $1
        else
            build $1
        fi
    fi
else
    if [[ $push == true ]]; then
        for img in ${images[@]}; do
            push $img
        done
    else
        for img in ${images[@]}; do
            echo -e "\n\n\nBuilding $img\n\n"
            build $img
        done
    fi
fi
